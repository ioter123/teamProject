<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/ "/>

	<!-- 이성원: 리소스 매핑 (include폴더, ckeditor용 폴더) -->	
	<resources mapping="/include/**" location="/WEB-INF/views/include/" ></resources>
	<resources mapping="/ckeditor/**" location="/WEB-INF/views/ckeditor/" ></resources>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.weather.proj" />
	<beans:bean class="com.weather.proj.life.controller.LifeJisuScheduler" />
	<beans:bean class="com.weather.proj.temp.controller.WeatherScheduler" />
	<task:annotation-driven scheduler="scheduler"/>	
	<task:scheduler id="scheduler" pool-size="10"/>
	

	<!-- 이성원: 파일 업로드에 사용할 라이브러리를 등록하는 부분 -->
	<beans:bean id="multipartResolver" 		
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--	최대 업로드 파일의 용량을 지정한다.	(여기에서는 1기가바이트) -->
		<beans:property name="maxUploadSize" 	value="1073741824" /> 
		<!--	최대 업로드 메모리를 지정한다.	주로 최대 업로드 파일의 용량과 동일하게 지정하면 된다. -->
		<beans:property name="maxInMemorySize"  value="1073741824" />
		<!--	파일의 이름이 한글인 경우 엔코딩 방식을 지정한다.	-->
		<beans:property name="defaultEncoding" value="UTF-8" />
  </beans:bean>
  
  <!-- 이성원: 파일업로드를 위한 디렉토리 설정(board의 첨부파일 올릴 위치) -->
	<!-- String uploadPath = new String("e:/upload/board"); -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="e:/upload"/>
	</beans:bean>
 
   <!--이성원: 사용할 인터셉터 클래스를 등록  --> 
   <beans:bean id="loginInterceptor" class="com.weather.proj.util.LoginCheck"/>
   <!--이성원: 사용할 인터셉터 처리할 path 등록  --> 
   <!-- 최정호 네이버연동로그인 -->
   <beans:bean id="naverLoginBO" class="com.weather.proj.member.controller.NaverLoginBO"/>
   
   <interceptors>
		<interceptor>
			<!--언제 인터셉터가 처리될지 지정하는 곳 -->
	    <mapping path="/board/boardWrite.do" />
			<mapping path="/board/boardupdate.do" />
			<mapping path="/board/boradDelete.do" />
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
	</interceptors>

	<context:component-scan base-package="com.weather.proj"/>
	<!--관리자 : 사용할 인터셉터 클래스를 등록  --> 
   <beans:bean id="loginInterceptor2" class="com.weather.proj.util.AdminCheck"/>
   <!--관리자 : 사용할 인터셉터 처리할 path 등록  --> 
   <interceptors>
		<interceptor>
			<!--언제 인터셉터가 처리될지 지정하는 곳 -->
	      	<mapping path="/memberManage.do" />
			<mapping path="/memberManageDetail.do" />
			<mapping path="/addProduct.do" />
			<mapping path="/updateProduct.do" />
			<beans:ref bean="loginInterceptor2"/>
		</interceptor>
	</interceptors>

</beans:beans>
